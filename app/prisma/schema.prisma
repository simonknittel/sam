generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"] // https://github.com/prisma/prisma/issues/18095
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Manufacturer {
    id     String   @id @default(cuid())
    name   String   @unique
    image  String?
    series Series[]
}

model Series {
    id             String       @id @default(cuid())
    name           String       @unique
    image          String?
    manufacturerId String
    manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
    variants       Variant[]

    @@unique([name, manufacturerId])
}

model Variant {
    id       String  @id @default(cuid())
    name     String
    image    String?
    seriesId String
    series   Series  @relation(fields: [seriesId], references: [id], onDelete: Cascade)
    ships    Ship[]

    @@unique([name, seriesId])
}

model Ship {
    id               String            @id @default(cuid())
    ownerId          String
    owner            User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    variantId        String
    variant          Variant           @relation(fields: [variantId], references: [id], onDelete: Cascade)
    name             String?
    hullStatus       String?
    ammunitionStatus String?
    operations       OperationMember[]
}

model Operation {
    id      String            @id @default(cuid())
    title   String
    units   OperationUnit[]
    members OperationMember[]
}

model OperationMember {
    operationId String
    operation   Operation @relation(fields: [operationId], references: [id], onDelete: Cascade)
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    status      String    @default("pending") // pending, confirmed

    operationUnitId String?
    operationUnit   OperationUnit? @relation(fields: [operationUnitId], references: [id])
    title           String? // E.g. Squadron Leader, Alpha-1 Flight Leader, Alpha-1 Wingman, ...
    shipId          String?
    ship            Ship?          @relation(fields: [shipId], references: [id], onDelete: Cascade)

    @@id([operationId, userId])
}

model OperationUnit {
    id          String            @id @default(cuid())
    operationId String
    operation   Operation         @relation(fields: [operationId], references: [id], onDelete: Cascade)
    title       String // E.g. Squadron 1, Squad 2, Freighters, ...
    type        String // squadron, flight, squad, fireteam, flight-other
    members     OperationMember[]

    parentUnitId String?
    parentUnit   OperationUnit?  @relation("ChildUnits", fields: [parentUnitId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    childUnits   OperationUnit[] @relation("ChildUnits")
}

model Entity {
    id           String              @id @default(cuid())
    createdAt    DateTime            @default(now())
    updatedAt    DateTime            @updatedAt
    type         String              @default("citizen") // citizen, organization
    logs         EntityLog[]
    logRelations EntityLogRelation[]
}

model EntityLog {
    id        String   @id @default(cuid())
    entityId  String
    entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    type      String // citizen: handle, note, joined-an-org, left-an-org, spectrum-id, citizen-record, ...; organization: note, ...
    content   String?             @db.Text
    relations EntityLogRelation[]

    securityLevel String    @default("public") // public, ...
    submitterId   String
    submitter     User      @relation("submitter", fields: [submitterId], references: [id], onDelete: Cascade)
    confirmed     DateTime?
    confirmerId   String?
    confirmer     User?     @relation("confirmer", fields: [confirmerId], references: [id], onDelete: Cascade)
}

model EntityLogRelation {
    id          String    @id @default(cuid())
    entityLogId String
    entityLog   EntityLog @relation(fields: [entityLogId], references: [id], onDelete: Cascade)
    entityId    String
    entity      Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String    @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?   @db.Text
    access_token      String?   @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?   @db.Text
    session_state     String?
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime? @default(now())
    updatedAt         DateTime?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                   String            @id @default(cuid())
    name                 String?
    email                String?           @unique
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]
    role                 String            @default("new")
    discordUsername      String?
    discordDiscriminator String?
    createdAt            DateTime?         @default(now())
    updatedAt            DateTime?
    operations           OperationMember[]
    ships                Ship[]
    submittedEntityLogs  EntityLog[]       @relation("submitter")
    confirmedEntityLogs  EntityLog[]       @relation("confirmer")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
