generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"] // https://github.com/prisma/prisma/issues/18095
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Manufacturer {
    id     String   @id @default(cuid())
    name   String   @unique
    image  String?
    series Series[]
}

model Series {
    id             String       @id @default(cuid())
    name           String       @unique
    image          String?
    manufacturerId String
    manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
    variants       Variant[]

    @@unique([name, manufacturerId])
}

model Variant {
    id       String           @id @default(cuid())
    name     String
    image    String?
    seriesId String
    series   Series           @relation(fields: [seriesId], references: [id], onDelete: Cascade)
    owners   FleetOwnership[]

    @@unique([name, seriesId])
}

model FleetOwnership {
    userId    String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    variantId String
    variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
    count     Int     @default(1)

    @@unique([userId, variantId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                   String           @id @default(cuid())
    name                 String?
    email                String?          @unique
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]
    role                 String           @default("new")
    fleet                FleetOwnership[]
    discordUsername      String?
    discordDiscriminator String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
