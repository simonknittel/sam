model Entity {
  id                                           String                               @id @default(cuid())
  createdAt                                    DateTime                             @default(now())
  updatedAt                                    DateTime                             @updatedAt
  logs                                         EntityLog[]
  createdById                                  String
  createdBy                                    User                                 @relation("createdBy", fields: [createdById], references: [id], onDelete: Cascade)
  activeOrganizationsMemberships               ActiveOrganizationMembership[]
  organizationMembershipHistoryEntries         OrganizationMembershipHistoryEntry[] @relation(name: "OrganizationMembershipHistoryEntry")
  createdOrganizationMemberHistoryEntries      OrganizationMembershipHistoryEntry[] @relation(name: "CreatedOrganizationMemberHistoryEntries")
  confirmedOrganizationMemberHistoryEntries    OrganizationMembershipHistoryEntry[] @relation(name: "ConfirmedOrganizationMemberHistoryEntries")
  createdOrganizationAttributeHistoryEntries   OrganizationAttributeHistoryEntry[]  @relation(name: "CreatedOrganizationAttributeHistoryEntries")
  confirmedOrganizationAttributeHistoryEntries OrganizationAttributeHistoryEntry[]  @relation(name: "ConfirmedOrganizationAttributeHistoryEntries")
  createdOrganizations                         Organization[]                       @relation(name: "CreatedOrganizations")
  receivedSilcTransactions                     SilcTransaction[]                    @relation("receiver")
  createdSilcTransactions                      SilcTransaction[]                    @relation("createdBy")
  updatedSilcTransactions                      SilcTransaction[]                    @relation("updatedBy")
  deletedSilcTransactions                      SilcTransaction[]                    @relation("deletedBy")
  updatedSilcSettings                          SilcSetting[]                        @relation("updatedBy")
  eventManagers                                Event[]                              @relation("eventManagers")
  createdTasks                                 Task[]                               @relation("createdBy")
  cancelledTasks                               Task[]                               @relation("cancelledBy")
  deletedTasks                                 Task[]                               @relation("deletedBy")
  assignedTasks                                TaskAssignment[]                     @relation("citizen")
  completedTasks                               Task[]                               @relation("completedBy")
  createdTaskAssignments                       TaskAssignment[]                     @relation("createdBy")
  completionistsTask                           Task[]                               @relation("completionists")

  // Holds the latest confirmed values
  spectrumId                String?
  handle                    String?
  discordId                 String?                    @unique
  teamspeakId               String?
  citizenId                 String?
  communityMoniker          String?
  roles                     String?                    @db.Text
  createdPenaltyEntries     PenaltyEntry[]             @relation("createdBy")
  deletedPenaltyEntries     PenaltyEntry[]             @relation("deletedBy")
  penaltyEntries            PenaltyEntry[]             @relation("citizen")
  eventPositionApplications EventPositionApplication[] @relation("citizen")
  eventPositions            EventPosition[]            @relation("citizen")
  silcBalance               Int                        @default(0)
  totalEarnedSilc           Int                        @default(0)
}

model EntityLog {
  id            String               @id @default(cuid())
  entityId      String
  entity        Entity               @relation(fields: [entityId], references: [id], onDelete: Cascade)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  type          String // TODO: types.ts
  content       String?              @db.Text
  submittedById String
  submittedBy   User                 @relation("submittedBy", fields: [submittedById], references: [id], onDelete: Cascade)
  attributes    EntityLogAttribute[]

  @@index([type]) // `type: Hash` isn't supported on MySQL
}

model EntityLogAttribute {
  id          String    @id @default(cuid())
  entityLogId String    @map("eneityLogId")
  entityLog   EntityLog @relation(fields: [entityLogId], references: [id], onDelete: Cascade)
  key         String // TODO: types.ts
  value       String
  createdAt   DateTime  @default(now())
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([key]) // `type: Hash` isn't supported on MySQL
}

model NoteType {
  id   String @id @default(cuid())
  name String @unique
}

model ClassificationLevel {
  id   String @id @default(cuid())
  name String @unique
}
