model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime? @default(now())
  updatedAt         DateTime?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                         String                   @id @default(cuid())
  name                       String?
  email                      String?                  @unique
  emailVerified              DateTime?
  image                      String?
  accounts                   Account[]
  sessions                   Session[]
  role                       String?
  createdAt                  DateTime?                @default(now())
  updatedAt                  DateTime?
  operations                 OperationMember[]
  ships                      Ship[]
  createdEntities            Entity[]                 @relation("createdBy")
  submittedEntityLogs        EntityLog[]              @relation("submittedBy")
  createdEntityLogAttributes EntityLogAttribute[]
  lastSeenAt                 DateTime?
  uploads                    Upload[]
  emailConfirmationTokens    EmailConfirmationToken[]
  createdVariantTags         VariantTag[]             @relation("createdBy")
  updatedVariantTags         VariantTag[]             @relation("updatedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailConfirmationToken {
  token   String   @id
  email   String
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires DateTime
}

model Role {
  id                String             @id @default(cuid())
  name              String             @unique
  iconId            String?            @map("imageId")
  icon              Upload?            @relation(name: "icon", fields: [iconId], references: [id], onDelete: SetNull)
  thumbnailId       String?            @map("thumbnailId")
  thumbnail         Upload?            @relation(name: "thumbnail", fields: [thumbnailId], references: [id], onDelete: SetNull)
  permissionStrings PermissionString[]
  flowNodes         FlowNode[]         @relation("flowNodes")
  inherits          Role[]             @relation("inheritance")
  inheritedBy       Role[]             @relation("inheritance")
  eventPositions    EventPosition[]
  tasksRequiredIn   Task[]             @relation("requiredRoles")
  silcSalaries      SilcRoleSalary[]
}

model PermissionString {
  id               String @id @default(cuid())
  roleId           String
  role             Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionString String
}
